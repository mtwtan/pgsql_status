global
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon
    ssl-server-verify none
    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-keep-alive
    #option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend  tower_frontend
    bind {{ vip_address }}:80
    bind {{ vip_address }}:443 ssl crt /etc/ssl/certname.bundle.pem
    mode http
    acl secure dst_port eq 443
    reqadd X-Forwarded-Proto:\ https
    reqadd X-Forwarded-Port:\ 443
    redirect scheme https if !{ ssl_fc }
    option forwardfor
    acl host_tower hdr(host) -i domain.name.net
    rspadd Strict-Transport-Security:\ max-age=31536000;\ includeSubDomains;\ preload
    use_backend tower_backend if host_tower

frontend  pgsql_frontend_rw
    bind {{ vip_address_pgsql }}:5432
    mode tcp
    option tcplog
    default_backend pg_backend_rw
    maxconn 2000

frontend  pgsql_frontend_ro
    bind {{ vip_address_pgsql }}:5433
    mode tcp
    option tcplog
    default_backend pg_backend_ro

#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------

backend tower_backend
    balance   leastconn
    mode http
    option httplog
    cookie SERVERID insert indirect nocache
    option httpchk HEAD / HTTP/1.1\r\nHost:\ certname.domain # Modify to suit domain name
    option forwardfor except 127.0.0.1/8
    server tower_node_1 {{ tower_node_1_ip }}:443 check ssl verify none
    server tower_node_2 {{ tower_node_2_ip }}:443 check ssl verify none
    server tower_node_3 {{ tower_node_3_ip }}:443 check ssl verify none

backend pg_backend_rw
    balance  roundrobin
    mode tcp
    option httpchk GET /status
    http-check expect string MASTER
    server pgsql_1 {{ pgsql_node_1_ip }}:5432 check port 80
    server pgsql_2 {{ pgsql_node_2_ip }}:5432 check port 80

backend pg_backend_ro
    balance roundrobin
    mode tcp
    option httpchk GET /status
    http-check expect string SLAVE
    server pgsql_1 {{ pgsql_node_1_ip }}:5432 check port 80
    server pgsql_2 {{ pgsql_node_2_ip }}:5432 check port 80
